# Generated by Django 4.0.4 on 2024-02-07 14:04

import app.webapp.models.content
import app.webapp.models.digitization
import app.webapp.utils.iiif.validation
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import functools


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("webapp", "init"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConservationPlace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, verbose_name="Lieu de conservation"
                    ),
                ),
                (
                    "license",
                    models.URLField(blank=True, null=True, verbose_name="Licence"),
                ),
            ],
            options={
                "verbose_name": "Lieu de conservation",
                "verbose_name_plural": "Lieu de conservations",
            },
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True,
                        help_text="Saisissez une année au format numérique. Exemple : '1401' à '1500' pour indiquer le 15<sup>ème</sup> siècle.",
                        null=True,
                        verbose_name="Date minimale",
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Date maximale"
                    ),
                ),
                (
                    "page_min",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[app.webapp.models.content.validate_page],
                        verbose_name="De la page/folio",
                    ),
                ),
                (
                    "page_max",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[app.webapp.models.content.validate_page],
                        verbose_name="Jusqu'à la page/folio",
                    ),
                ),
                (
                    "whole_witness",
                    models.BooleanField(
                        default=False,
                        help_text="Le témoin ne contient-t-il que ce œuvre ?",
                        verbose_name="Intégralité du témoin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contenu",
                "verbose_name_plural": "Contenus",
            },
        ),
        migrations.CreateModel(
            name="DigitizationSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("source", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "verbose_name": "Source de la numérisation",
                "verbose_name_plural": "Source de la numérisations",
            },
        ),
        migrations.CreateModel(
            name="Edition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nom sans valeur historique, utile pour distinguer plusieurs éditions partageant date et lieu de publication",
                        max_length=500,
                        verbose_name="Titre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Édition",
                "verbose_name_plural": "Éditions",
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Nom"),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Date minimale"
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Date maximale"
                    ),
                ),
            ],
            options={
                "verbose_name": "Acteur historique",
                "verbose_name_plural": "Acteur historiques",
            },
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Nom"),
                ),
                (
                    "country",
                    models.CharField(blank=True, max_length=150, verbose_name="Pays"),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=8,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lieu",
                "verbose_name_plural": "Lieus",
            },
        ),
        migrations.CreateModel(
            name="Series",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        max_length=600,
                        verbose_name="Éléments descriptifs du contenu",
                    ),
                ),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True,
                        help_text="Saisissez une année au format numérique. Exemple : '1401' à '1500' pour indiquer le 15<sup>ème</sup> siècle.",
                        null=True,
                        verbose_name="Date minimale",
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Date maximale"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Les informations seront accessibles aux autres utilisateurs de la base.",
                        verbose_name="Rendre public",
                    ),
                ),
                (
                    "edition",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.edition",
                        verbose_name="Édition",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.conservationplace",
                        verbose_name="Lieu de conservation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Série",
                "verbose_name_plural": "Séries",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=50)),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
            },
        ),
        migrations.AlterModelOptions(
            name="language",
            options={"verbose_name": "Langue", "verbose_name_plural": "Langues"},
        ),
        migrations.AlterField(
            model_name="language",
            name="lang",
            field=models.CharField(max_length=200, unique=True, verbose_name="Langue"),
        ),
        migrations.CreateModel(
            name="Work",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=600, verbose_name="Titre")),
                (
                    "date_min",
                    models.IntegerField(
                        blank=True,
                        help_text="Saisissez une année au format numérique. Exemple : '1401' à '1500' pour indiquer le 15<sup>ème</sup> siècle.",
                        null=True,
                        verbose_name="Date minimale",
                    ),
                ),
                (
                    "date_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Date maximale"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        verbose_name="Notes complémentaires",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.person",
                        verbose_name="Auteur",
                    ),
                ),
                (
                    "lang",
                    models.ManyToManyField(
                        blank=True, to="webapp.language", verbose_name="Langue"
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.place",
                        verbose_name="Lieu de création",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, to="webapp.tag", verbose_name="Tag"
                    ),
                ),
            ],
            options={
                "verbose_name": "Œuvre",
                "verbose_name_plural": "Œuvres",
            },
        ),
        migrations.CreateModel(
            name="Witness",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ms", "Manuscrit"),
                            ("tpr", "Typographie"),
                            ("wpr", "Bois gravés"),
                        ],
                        max_length=150,
                        verbose_name="Type",
                    ),
                ),
                (
                    "id_nb",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Cote"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        max_length=1000,
                        verbose_name="Notes complémentaires",
                    ),
                ),
                (
                    "nb_pages",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Nombre de pages/folios"
                    ),
                ),
                (
                    "page_type",
                    models.CharField(
                        choices=[
                            ("pag", "Paginé"),
                            ("fol", "Folioté"),
                            ("oth", "Autre"),
                        ],
                        default=("pag", "Paginé"),
                        max_length=150,
                        verbose_name="Type de pagination",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="<i class='fa-solid fa-triangle-exclamation' None></i> Les informations seront accessibles aux autres utilisateurs de la base.",
                        verbose_name="Rendre public",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True,
                        verbose_name="Lien externe (catalogue en ligne, etc.)",
                    ),
                ),
                ("slug", models.SlugField(max_length=600)),
                (
                    "volume_title",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Titre du volume",
                    ),
                ),
                (
                    "volume_nb",
                    models.IntegerField(
                        blank=True,
                        help_text="Numéro utile pour classer les différents tomes d'une édition, mais qui n'a pas nécessairement de valeur historique",
                        null=True,
                        verbose_name="Numéro de volume",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "edition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.edition",
                        verbose_name="Édition",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.conservationplace",
                        verbose_name="Lieu de conservation",
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.series",
                        verbose_name="Série",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Témoin",
                "verbose_name_plural": "Témoins",
                "ordering": ["-place"],
            },
        ),
        migrations.AddField(
            model_name="series",
            name="tags",
            field=models.ManyToManyField(
                blank=True, to="webapp.tag", verbose_name="Tag"
            ),
        ),
        migrations.AddField(
            model_name="series",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="series",
            name="work",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.work",
                verbose_name="Œuvre",
            ),
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pub", "éditeur/diffuseur"),
                            ("aut", "auteur"),
                            ("ill", "enlumineur"),
                            ("sel", "libraire"),
                            ("cop", "copiste"),
                            ("dra", "dessinateur"),
                            ("eng", "graveur"),
                        ],
                        max_length=150,
                        verbose_name="Rôle",
                    ),
                ),
                (
                    "content",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="roles",
                        to="webapp.content",
                        verbose_name="Contenu",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="webapp.person",
                        verbose_name="Acteur historique",
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="roles",
                        to="webapp.series",
                        verbose_name="Série",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rôle",
                "verbose_name_plural": "Rôles",
            },
        ),
        migrations.AddField(
            model_name="edition",
            name="place",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="Lieu de publication",
            ),
        ),
        migrations.AddField(
            model_name="edition",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.person",
                verbose_name="Éditeur/libraire",
            ),
        ),
        migrations.CreateModel(
            name="Digitization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "digit_type",
                    models.CharField(
                        choices=[("img", "Image"), ("pdf", "Pdf"), ("man", "Manifest")],
                        max_length=150,
                        verbose_name="Type",
                    ),
                ),
                ("license", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "pdf",
                    models.FileField(
                        blank=True,
                        upload_to="pdf",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"]
                            )
                        ],
                        verbose_name="PDF",
                    ),
                ),
                (
                    "manifest",
                    models.URLField(
                        blank=True,
                        help_text="<div class='tooltip'>\n                 <i class='fa-solid fa-circle-info' title='Manifest'></i>\n                 <span class='tooltiptext'>Un manifeste permet de décrire et de partager des numérisations avec leurs métadonnées selon la norme IIIF.</span>\n             </div>\n             E.g.: <a href='https://gallica.bnf.fr/iiif/ark:/12148/btv1b60004321/manifest.json' target='_blank'>\n             https://gallica.bnf.fr/iiif/ark:/12148/btv1b60004321/manifest.json</a>",
                        validators=[app.webapp.utils.iiif.validation.validate_manifest],
                        verbose_name="manifest",
                    ),
                ),
                (
                    "images",
                    models.ImageField(
                        blank=True,
                        help_text="Envoyez des images jusqu'à 2 Go.",
                        upload_to=functools.partial(
                            app.webapp.models.digitization.no_save, *(), **{}
                        ),
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "tif"]
                            )
                        ],
                        verbose_name="image",
                    ),
                ),
                (
                    "is_open",
                    models.BooleanField(
                        default=False,
                        help_text="Les images numérisées sont-elles libres de droits ?",
                        verbose_name="Libre d'utilisation",
                    ),
                ),
                (
                    "witness",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digitizations",
                        to="webapp.witness",
                    ),
                ),
            ],
            options={
                "verbose_name": "Numérisation",
                "verbose_name_plural": "Numérisations",
            },
        ),
        migrations.AddField(
            model_name="content",
            name="lang",
            field=models.ManyToManyField(
                blank=True, to="webapp.language", verbose_name="Langue"
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="place",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="Lieu de création",
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="tags",
            field=models.ManyToManyField(
                blank=True, to="webapp.tag", verbose_name="Tag"
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="witness",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="contents",
                to="webapp.witness",
                verbose_name="Témoin",
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="work",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.work",
                verbose_name="Œuvre",
            ),
        ),
        migrations.AddField(
            model_name="conservationplace",
            name="city",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="webapp.place",
                verbose_name="Ville",
            ),
        ),
        migrations.CreateModel(
            name="Annotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model", models.CharField(max_length=150)),
                ("is_validated", models.BooleanField(default=False)),
                (
                    "digitization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="annotations",
                        to="webapp.digitization",
                        verbose_name="Numérisation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Annotation",
                "verbose_name_plural": "Annotations",
            },
        ),
    ]
