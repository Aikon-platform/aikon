{"version":3,"file":"ModalController-1e644e56.js","sources":["../../../../webpack/src/regions/modal/ModalRegion.svelte","../../../../webpack/src/regions/modal/ModalSimilarityOverlay.svelte","../../../../webpack/src/regions/modal/ModalSimilaritySideBySide.svelte","../../../../webpack/src/regions/modal/ModalSimilarity.svelte","../../../../webpack/src/regions/modal/ModalQueryExpansion.svelte","../../../../webpack/src/regions/modal/ModalBase.svelte","../../../../webpack/src/regions/modal/ModalController.svelte"],"sourcesContent":["<script>\n    import { refToIIIF } from \"../../utils\";\n\n    ////////////////////////////////////////\n\n    /** @type {string} */\n    export let mainImg;\n\n    const mainImgHref = refToIIIF(mainImg);\n\n</script>\n\n<div class=\"img-wrapper is-flex is-justify-content-center is-align-items-center\">\n    <img src={mainImgHref}\n         alt=\"Main view of region {mainImg}\"\n    >\n</div>\n\n<style>\n    .img-wrapper {\n        height: 100%;\n        width: 100%;\n    }\n    img {\n        height: 100%;\n    }\n</style>\n","<script>\n    import { appLang } from \"../../constants.js\";\n    import { setContext } from 'svelte';\n    import { writable } from 'svelte/store';\n\n    import InputDropdown from \"../../ui/InputDropdown.svelte\";\n    import InputSlider from \"../../ui/InputSlider.svelte\";\n\n    /** @typedef {import(\"../../ui/InputDropdown.svelte\").DropdownChoiceArray} DropdownChoiceArray */\n    /** @typedef {import(\"./types.js\").SimilarityImgDataType} SimilarityImgDataType */\n\n    /////////////////////////////////////////////\n\n    /** @type {SimilarityImgDataType} */\n    export let imgData;\n\n    /** @type {DropdownChoiceArray} */\n    const flipChoices = [\n        { value:\"h\", label: appLang===\"fr\" ? \"Basculer horizontalement\" : \"Flip horizontally\" },\n        { value:\"v\", label: appLang===\"fr\" ? \"Basculer verticalement\" : \"Flip vertically\" },\n        { value:\"hv\", label: appLang===\"fr\" ? \"Basculer horizontalement et verticalement\" : \"Flip horizontally and vertically\" }\n    ]\n\n    /** @type {number} 0..1 */\n    let overlayOpacity = 0.5;\n    const startOverlayOpacity = overlayOpacity;\n\n    /** @type {number} 0..360 */\n    let overlayRotation = 0;\n    const startOverlayRotation = overlayRotation;\n\n    /** @type {number} 0..200. css uses 0..1 values, but to make things more readable we use a 0..200% scale */\n    let overlayScale = 100\n    const startOverlayScale = overlayScale;\n\n    /** @type {number[]} [0..2, 0..2] X/Y values for css `scale` to perform a flip. will be combined with overlayScale */\n    let overlayFlip = [1,1];\n    const startOverlayFlip = structuredClone(overlayFlip);\n\n    /** @type{number[]} [-100..100, -100..100] */\n    let overlayTranslate = [0,0];\n    const startOverlayTranslate = structuredClone(overlayTranslate);\n\n    let currentlyResetting = false;\n\n    /** @type {writable} set a new value to trigger an update in descendant form components that implement this behaviour */\n    const resetTrigger = writable(window.crypto.randomUUID());\n    setContext(\"resetTrigger\", resetTrigger);\n\n    $: cssTransforms = `translate(${overlayTranslate[0]-50}%, ${overlayTranslate[1]}%)\n                        rotate(${overlayRotation}deg)\n                        scale(${overlayFlip.map((x) => x * (overlayScale/100)).join()})`;\n\n    /////////////////////////////////////////////\n\n    const makeAlt = (title) => appLang===\"fr\"\n        ? `Vue principale de la région ${title}`\n        : `Main view of region ${title}`;\n\n    const updateOverlayOpacity = (e) => overlayOpacity = e.detail;\n\n    const updateOverlayRotation = (e) => overlayRotation = e.detail;\n\n    const updateOverlayScale = (e) => overlayScale = e.detail;\n\n    // reassignment is necessary to redefine `cssTransforms`\n    const updateOverlayTranslateX = (e) => overlayTranslate = [ e.detail, overlayTranslate[1] ];\n\n    const updateOverlayTranslateY = (e) => overlayTranslate = [ overlayTranslate[0], e.detail ];\n\n    const updateOverlayFlip = (e) => {\n        let flip = e.detail[0];\n        overlayFlip =\n            flip === \"hv\"\n            ? [-1,-1]\n            : flip === \"h\"\n            ? [-1, 1]\n            : flip === \"v\"\n            ? [1,-1]\n            : [1,1];\n    }\n\n    const resetOverlayParams = () => {\n        overlayOpacity = startOverlayOpacity;\n        overlayRotation = startOverlayRotation;\n        overlayScale = startOverlayScale;\n        overlayFlip = startOverlayFlip;\n        overlayTranslate = startOverlayTranslate;\n        // forme elements will be reset\n        resetTrigger.set(window.crypto.randomUUID());\n        // will set a css class which will animate resetting.\n        currentlyResetting = true;\n        setTimeout(() => currentlyResetting = false, 1000);\n    }\n</script>\n\n<div class=\"overlay-wrapper\">\n    <img class=\"compare-img\"\n         src={imgData.queryImage.href}\n         alt={imgData.queryImage.title}\n    >\n    <img class=\"main-img\"\n         class:overlay-reset={currentlyResetting}\n         src={imgData.similarityImage.href}\n         alt={imgData.similarityImage.title}\n         style:opacity={overlayOpacity}\n         style:transform={cssTransforms}\n    >\n</div>\n<div class=\"toolbar-wrapper\">\n    <div class=\"toolbar-title\"><strong>Transform query image</strong></div>\n    <div class=\"toolbar-controls columns is-3 is-multiline\">\n        <div class=\"column is-one-quarter\">\n            <InputSlider minVal={0}\n                        maxVal={1}\n                        start={startOverlayOpacity}\n                        emitOnUpdate={true}\n                        title={appLang===\"fr\" ? \"Opacité\" : \"Opacity\"}\n                        on:updateSlider={updateOverlayOpacity}\n            ></InputSlider>\n        </div>\n        <div class=\"column is-one-quarter\">\n            <InputSlider minVal={0}\n                        maxVal={360}\n                        start={startOverlayRotation}\n                        step={1}\n                        emitOnUpdate={true}\n                        title=\"Rotation\"\n                        on:updateSlider={updateOverlayRotation}\n            ></InputSlider>\n        </div>\n        <div class=\"column is-one-quarter\">\n            <InputSlider minVal={0}\n                        maxVal={200}\n                        step={1}\n                        start={startOverlayScale}\n                        emitOnUpdate={true}\n                        title={appLang===\"fr\" ? \"Redimensionner\" : \"Scale\"}\n                        on:updateSlider={updateOverlayScale}\n            ></InputSlider>\n        </div>\n        <div class=\"column is-one-quarter\">\n            <InputDropdown choicesItems={flipChoices}\n                        start={[]}\n                        lightDisplay={true}\n                        placeholder={appLang===\"fr\" ? \"Séléctionner\" : \"Select\"}\n                        title={appLang===\"fr\" ? \"Basculer\" : \"Flip\"}\n                        on:updateValues={updateOverlayFlip}\n            ></InputDropdown>\n        </div>\n        <div class=\"column is-one-third\">\n            <InputSlider minVal={-100}\n                        maxVal={100}\n                        step={1}\n                        start={startOverlayTranslate[0]}\n                        emitOnUpdate={true}\n                        title={appLang===\"fr\" ? \"Translation horizontale\" : \"Horizontal translate\"}\n                        on:updateSlider={updateOverlayTranslateX}\n            ></InputSlider>\n        </div>\n        <div class=\"column is-one-third\">\n            <InputSlider minVal={-100}\n                        maxVal={100}\n                        step={1}\n                        start={startOverlayTranslate[1]}\n                        emitOnUpdate={true}\n                        title={appLang===\"fr\" ? \"Translation verticale\" : \"Vertical translate\"}\n                        on:updateSlider={updateOverlayTranslateY}\n            ></InputSlider>\n        </div>\n        <div class=\"column is-one-third is-flex is-flex-direction-column is-justify-content-center is-align-items-flex-end\">\n            <button class=\"button is-link\"\n                    on:click={resetOverlayParams}\n            >{appLang===\"fr\" ? \"Réinitialiser\" : \"Reset\"}</button>\n        </div>\n    </div>\n</div>\n\n<style>\n    .toolbar-wrapper {\n        border-top: var(--default-border);\n    }\n    .toolbar-controls > .column {\n        min-width: 150px;\n    }\n    .overlay-wrapper {\n        position: relative;\n        /*\n        min-height: 50vh;\n        max-height: 100%;\n        */\n        height: 100%;\n        overflow: scroll;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .overlay-wrapper img {\n        position: absolute;\n        left: 50%;\n        transform: translate(-50%, 0);\n    }\n    .overlay-reset {\n        transition: opacity .3s ease-out, transform .3s ease-out;\n    }\n</style>\n","<script>\n    import { appLang } from \"../../constants.js\";\n\n    /** @typedef {import(\"./types.js\").SimilarityImgDataType} SimilarityImgDataType */\n\n    /** @type {SimilarityImgDataType} */\n    export let imgData;\n</script>\n\n<div class=\"side-by-side columns\">\n    {#each [\"queryImage\", \"similarityImage\"] as imgDataKey}\n        <div class=\"img-legend-wrapper column is-flex is-flex-direction-column is-justify-content-center is-align-items-center\">\n            <span>{\n                imgDataKey===\"queryImage\" && appLang===\"fr\"\n                ? \"Image requête\"\n                : imgDataKey===\"similarityImage\" && appLang===\"fr\"\n                ? \"Similarité\"\n                : imgDataKey===\"queryImage\" && appLang===\"en\"\n                ? \"Query image\"\n                : \"Similarity\"\n            }</span>\n            <!--\n            <div class=\"img-wrapper\">\n            -->\n            <img src={imgData[imgDataKey].href}\n                     alt={imgData[imgDataKey].title}\n                >\n            <!--\n            </div>\n            -->\n        </div>\n    {/each}\n</div>\n\n<style>\n\n</style>\n","<script>\n    import { refToIIIF } from \"../../utils\";\n    import { appLang } from \"../../constants.js\";\n\n    import InputToggleCheckbox from \"../../ui/InputToggleCheckbox.svelte\";\n    import ModalSimilarityOverlay from \"./ModalSimilarityOverlay.svelte\";\n    import ModalSimilaritySideBySide from \"./ModalSimilaritySideBySide.svelte\";\n\n    /** @typedef {import(\"./types.js\").SimilarityImgDataType} SimilarityImgDataType */\n\n    /////////////////////////////////////////////\n\n    /** @type {string} */\n    export let mainImg;\n    /** @type {string} */\n    export let compareImg;\n\n    /** @type {SimilarityImgDataType} */\n    const imgData = {\n        similarityImage: { href: refToIIIF(mainImg), title: makeAlt(mainImg) },\n        queryImage: { href: refToIIIF(compareImg), title: makeAlt(compareImg) }\n    }\n\n    /** @type {boolean} */\n    let overlay = false;\n\n    /////////////////////////////////////////////\n\n    function makeAlt (title) {\n        return appLang===\"fr\"\n            ? `Vue principale de la région ${title}`\n            : `Main view of region ${title}`;\n    }\n\n    const updateToggleOverlay = () => overlay = !overlay;\n</script>\n\n<div class=\"modal-similarity\">\n    <div class=\"modal-similarity-images {overlay ? 'overlay-wrapper' : 'side-by-side-wrapper'}\">\n        {#if overlay}\n            <ModalSimilarityOverlay  imgData={imgData}></ModalSimilarityOverlay>\n        {:else}\n            <ModalSimilaritySideBySide imgData={imgData}></ModalSimilaritySideBySide>\n        {/if}\n    </div>\n    <div>\n        <InputToggleCheckbox start={false}\n                             buttonDisplay={true}\n                             checkboxLabel={appLang===\"en\" ? \"Overlay view\" : \"Vue superposée\"}\n                             on:updateChecked={updateToggleOverlay}\n        ></InputToggleCheckbox>\n    </div>\n</div>\n\n<style>\n    .modal-similarity {\n        display: grid;\n        grid-template-columns: 100%;\n        height: 100%;\n        max-height: 100%;\n        grid-template-rows: 90% 10%;\n    }\n    .modal-similarity-images.overlay-wrapper {\n        display: grid;\n        grid-template-rows: 1fr 0fr;\n    }\n    :global(.modal-similarity-images > *) {\n        height: 100%;\n    }\n    :global(.modal-similarity-images img) {\n        object-fit: contain;\n        max-height: 100%;\n        max-width: 100%;\n        z-index: 2;\n    }\n</style>\n","<script>\n    import { appLang } from \"../../constants.js\";\n\n    import SimilarityRow from \"../similarity/SimilarityRow.svelte\";\n\n    ////////////////////////////////////////\n\n    /** @type {string} */\n    export let mainImg;\n\n    /** @type {string} */\n    const mainImgWitnessId = mainImg.match(/wit(\\d+)/)[1]\n\n    const similarityViewUrl = buildRedirectionUrl()\n\n    ////////////////////////////////////////\n\n    /** @returns {string} */\n    function buildRedirectionUrl() {\n        const u = new URL(window.location.origin);\n        u.pathname = `${new URL(window.location).pathname.split(\"/\")[1]}/witness/${mainImgWitnessId}/regions/`\n        u.searchParams.set(\"tab\", \"similarity\");\n        console.log(u);\n        return u.href;\n    }\n</script>\n\n<div class=\"is-flex is-align-items-center is-justify-content-end\">\n    <a href={similarityViewUrl}>\n        <button class=\"button is-link\">{ appLang===\"fr\" ? \"Voir toutes les similarités pour ce document\" : \"View all similarities for this document\"}</button>\n    </a>\n</div>\n<SimilarityRow qImg={mainImg}></SimilarityRow>\n\n<style></style>\n","<!--\n    general functionning:\n    - different components are displayed depending on the context in which this component is used:\n        - for \"normal\" regions, only ModalRegion will be used\n        - for similarities, `ModalRegion`, `ModalSimilarity`, `ModalQueryExpansion` will be used\n    - `allowedViewIds` defines which views (aka, components) can be used in this modal, based on the props passed to it. each view is identified by a unique string.\n    - `currentViewId` is a value of `allowedViewIds`\n    - other data variables are derived from `allowedViewIds`: they are objects or arrays which contain and a reference to a value of `allowedViewIds` and extra data for a specific view (i.e. a component reference).\n    - tabs allow to switch between components. internally, `toggleView` will set a new `currentViewId`, which, by side-effect, will render a new component\n-->\n<script>\n    import { onMount, onDestroy, createEventDispatcher } from \"svelte\";\n\n    import { appLang } from \"../../constants.js\";\n\n    import ModalRegion from \"./ModalRegion.svelte\";\n    import ModalSimilarity from \"./ModalSimilarity.svelte\";\n    import ModalQueryExpansion from \"./ModalQueryExpansion.svelte\";\n\n    /** @typedef {\"main\"|\"similarity\"|\"expansion\"} ViewIdType */\n\n    //////////////////////////////////////////////////\n\n    export let mainImg;\n    export let compareImg;\n\n    const dispatch = createEventDispatcher();\n\n    /** @type {ViewIdType[]} */\n    const allowedViewIds =\n        mainImg && compareImg\n        ? [ \"main\", \"similarity\", \"expansion\" ]\n        : [ \"main\" ];\n\n    /** @type { {id:ViewIdType, label:string}[] } */\n    const viewTabs = allowedViewIds.map((viewId) => ({\n        id: viewId,\n        label:\n            viewId===\"expansion\" && appLang===\"fr\"\n            ? \"Expansion de requête\"\n            : viewId===\"expansion\" && appLang===\"en\"\n            ? \"Query expansion\"\n            : viewId===\"similarity\" && appLang===\"fr\"\n            ? \"Similarité\"\n            : viewId===\"similarity\" && appLang===\"en\"\n            ? \"Similarity\"\n            : viewId===\"main\" && appLang===\"fr\"\n            ? \"Vue principale\"\n            : \"Main view\"\n    }));\n\n    /** @type {{ [ViewIdType]: SvelteComponent }} viewId mapped to the relevant component instance */\n    const viewComponents = {};\n    allowedViewIds.map((viewId) =>\n        viewComponents[viewId] =\n            viewId===\"expansion\"\n            ? ModalQueryExpansion\n            : viewId===\"similarity\"\n            ? ModalSimilarity\n            : ModalRegion\n    );\n\n    const viewProps = {};\n    allowedViewIds.map((viewId) =>\n        viewProps[viewId] =\n            viewId===\"expansion\"\n            ? {compareImg: compareImg, mainImg: mainImg}\n            : viewId===\"similarity\"\n            ? {compareImg: compareImg, mainImg: mainImg}\n            : {mainImg: mainImg}\n    )\n\n    /** @type {ViewIdType} */\n    $: currentViewId = allowedViewIds[0];\n\n    //////////////////////////////////////////////////\n\n    const toggleView = (viewId) => currentViewId = viewId;\n\n    const onKeyDown = (e) => { if (key===\"Escape\") dispatch(\"closeModal\") };\n\n    const onClose = (e) => dispatch(\"closeModal\");\n\n    //////////////////////////////////////////////////\n\n    onMount(() => {\n        document.addEventListener(\"keyup\", onKeyDown);\n    })\n    onDestroy(() => {\n        document.removeEventListener(\"keydown\", onKeyDown);\n    })\n</script>\n\n\n<div id=\"region-modal-wrapper\"\n     class=\"modal is-active\">\n    <div class=\"modal-background\"></div>\n    <div class=\"modal-content\">\n        <div class=\"modal-inner\">\n\n            <div class=\"tabs is-centered\">\n                <ul>\n                    {#each viewTabs as { id, label }}\n                        <li class={id===currentViewId ? \"is-active\": \"\"}>\n                            <!-- svelte-ignore a11y-invalid-attribute -->\n                            <a on:click|preventDefault={() => toggleView(id)}\n                               href=\"\"\n                            >{ label }</a>\n                        </li>\n                    {/each}\n                </ul>\n            </div>\n\n            <div class=\"mb-4 ml-4 mr-4 modal-main-wrapper\">\n                <svelte:component this={viewComponents[currentViewId] || null}\n                                  {...viewProps[currentViewId] || {}}\n                ></svelte:component>\n            </div>\n\n        </div>\n    </div>\n    <button class=\"modal-close is-large\"\n            aria-label=\"close\"\n            on:click={onClose}\n    ></button>\n</div>\n\n<style>\n    .modal-content {\n        width: 80vw;\n        height: 80vh;\n    }\n    .modal-inner {\n        height: 100%;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 10% 90%;\n        background-color: var(--bulma-body-background-color);\n        border: var(--default-border);\n        border-radius: 1rem;\n    }\n    .modal-main-wrapper {\n        height: 100%;\n    }\n</style>\n","<script>\n    import { setContext } from \"svelte\";\n\n    import { appLang } from \"../../constants.js\";\n\n    import TooltipGeneric from \"../../ui/TooltipGeneric.svelte\";\n    import ModalBase from \"./ModalBase.svelte\";\n\n    //////////////////////////////////////////\n\n    /** @type {string} a value of RegionPair.img_(1|2): the \"main\" image to display */\n    export let mainImg;\n    /** @type {string?} a value of RegionPair.img_(1|2): an optional image to compare mainImg with (if mainImg is a similarity image, compareImg would be the query image) */\n    export let compareImg = undefined;\n\n    //`Region.svelte` is parent of `ModalController.svelte` and `ModalController` has for descendant `Region,svelte` => weird recursion in which a region contains a modal which could contain a region which could contain a modal.\n    // => `isInModal` context avoids this recursion by only implementing `ModalController` in `Region` if `getContext(isInModal)===false`\n    setContext(\"isInModal\", true);\n\n    const htmlId = `modal-opener-${window.crypto.randomUUID()}`;\n\n    const title = appLang===\"fr\" ? \"Vue détaillée\" : \"Detailed view\";\n\n    /** @type {boolean} when true, display the modal */\n    $: displayModal = false;\n    /** @type {SvelteComponent?} */\n    $: modal = mountModal(displayModal, modal);\n\n    //////////////////////////////////////////\n\n    /** mounting of the `ModalBase` is done in an imperative way and not in the template: this allows us to insert the modal at the end of the html `body` to ensure the modal is not shadowed by other elts */\n    const mountModal = (_displayModal, _modal) => {;\n        if (_displayModal) {\n            _modal = new ModalBase({\n                target: document.querySelector(\"body\"),\n                props: {\n                    mainImg: mainImg,\n                    compareImg: compareImg\n                }\n            })\n            _modal.$on(\"closeModal\", onCloseModal);\n        } else if (!_displayModal && modal!=null ) {\n            _modal.$destroy();\n        }\n        return _modal;\n    }\n\n    const onClick = () => displayModal = !displayModal;\n    const onCloseModal = () => displayModal = false;\n\n</script>\n\n\n<div id={htmlId}>\n    <TooltipGeneric targetHtmlId={htmlId}\n                    tooltipText={title}\n    ></TooltipGeneric>\n    <button class=\"button tag\"\n            on:click={onClick}\n            title={title}\n    >\n        <svg width=\"54\" height=\"30\" viewBox=\"0 0 54 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M53.6443 14.25C47.7042 5.33 37.7293 0 26.9801 0C16.2206 0 6.24576 5.33 0.305653 14.25L0 14.71L0.305653 15.17C6.24576 24.09 16.2206 29.42 26.9801 29.42C37.7293 29.42 47.7042 24.09 53.6443 15.16L53.95 14.71L53.6443 14.25ZM3.25025 14.71C7.63146 8.69001 14.0606 4.65 21.2641 3.22C20.0619 3.83 18.9411 4.62 17.963 5.59C15.5176 8.02 14.1625 11.25 14.1625 14.67C14.1625 18.11 15.5176 21.34 17.963 23.76C19.0124 24.79 20.1943 25.61 21.4781 26.23C14.1829 24.85 7.6824 20.78 3.25025 14.71ZM27.1125 22.64C22.7008 22.64 19.1041 19.08 19.1041 14.7C19.1041 12.59 19.9396 10.6 21.4475 9.10001C22.9555 7.60001 24.9729 6.77 27.1125 6.77C29.2522 6.77 31.2594 7.60001 32.7775 9.10001C34.2855 10.6 35.121 12.59 35.121 14.7C35.121 16.82 34.2855 18.82 32.7775 20.32C31.2594 21.81 29.242 22.64 27.1125 22.64ZM32.9915 26.14C34.204 25.53 35.3146 24.74 36.3029 23.77C38.7482 21.34 40.0932 18.11 40.0932 14.68C40.0932 9.75 37.281 5.47001 33.1647 3.32001C40.1747 4.81001 46.4102 8.83001 50.6896 14.71C46.3797 20.64 40.0728 24.67 32.9915 26.14Z\" fill=\"black\"/>\n            <path d=\"M26.9804 25.98C33.3222 25.98 38.4633 20.9343 38.4633 14.71C38.4633 8.48576 33.3222 3.44 26.9804 3.44C20.6386 3.44 15.4976 8.48576 15.4976 14.71C15.4976 20.9343 20.6386 25.98 26.9804 25.98Z\" fill=\"black\"/>\n            <path d=\"M17.9529 23.85L36.2928 5.85001\" stroke=\"black\" stroke-width=\"3\" stroke-miterlimit=\"10\"/>\n        </svg>\n    </button>\n</div>\n\n\n<style>\n    .button {\n        padding-left: .5em;\n        padding-right: .5em;\n    }\n    svg, path {\n        fill: var(--bulma-link);\n        stroke: var(--bulma-link);\n    }\n</style>\n"],"names":["ctx","attr","img","img_src_value","insert","target","div","anchor","append","mainImg","$$props","mainImgHref","refToIIIF","title","appLang","placeholder","start","button","textContent","queryImage","href","img0","img0_src_value","similarityImage","img1","img1_src_value","div0","div10","div1","div9","div2","div3","div4","div5","div6","div7","div8","imgData","flipChoices","value","label","overlayOpacity","startOverlayOpacity","overlayRotation","startOverlayRotation","overlayScale","startOverlayScale","overlayFlip","startOverlayFlip","structuredClone","overlayTranslate","startOverlayTranslate","currentlyResetting","resetTrigger","writable","window","crypto","randomUUID","setContext","$$invalidate","cssTransforms","map","x","join","e","detail","flip","set","setTimeout","t0_value","span","each_value","checkboxLabel","compareImg","makeAlt","overlay","a","mainImgWitnessId","match","similarityViewUrl","u","URL","location","origin","pathname","split","searchParams","console","log","buildRedirectionUrl","li","li_class_value","dirty","length","i","switch_instance_spread_levels","ul","get_spread_update","get_spread_object","dispatch","createEventDispatcher","allowedViewIds","viewTabs","viewId","id","viewComponents","ModalQueryExpansion","ModalSimilarity","ModalRegion","viewProps","toggleView","currentViewId","onKeyDown","key","onMount","document","addEventListener","onDestroy","removeEventListener","svg","path0","path1","path2","htmlId","onCloseModal","displayModal","_displayModal","_modal","modal","ModalBase","querySelector","props","$on","$destroy"],"mappings":"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"}
