{"version":3,"file":"ModalController-e98848ef.js","sources":["../../../../webpack/src/regions/modal/ModalRegion.svelte","../../../../webpack/src/regions/modal/ModalBase.svelte","../../../../webpack/src/regions/modal/ModalController.svelte"],"sourcesContent":["<script>\n    import Region from \"../Region.svelte\";\n\n    /** @typedef {import(\"../types.js\").RegionItemType} RegionItemType */\n\n    /** @type {RegionItemType} */\n    export let mainImgItem;\n</script>\n\n<div class=\"img-wrapper\">\n    <Region item={mainImgItem}\n            height=\"full\"\n    ></Region>\n</div>\n\n<style>\n    .img-wrapper {\n        height: 100%;\n        width: 100%;\n    }\n</style>\n","<!--\n    general functionning:\n    - different components are displayed depending on the context in which this component is used:\n        - for \"normal\" regions, only ModalRegion will be used\n        - for similarities, `ModalRegion`, `ModalSimilarity`, `ModalQueryExpansion` will be used\n    - `allowedViewIds` defines which views (aka, components) can be used in this modal, based on the props passed to it. each view is identified by a unique string.\n    - `currentViewId` is a value of `allowedViewIds`\n    - other data variables are derived from `allowedViewIds`: they are objects or arrays which map a reference to a value of `allowedViewIds` to extra data for a specific view (i.e. a component reference).\n    - tabs allow to switch between components. internally, `toggleView` will set a new `currentViewId`, which, by side-effects, will render a new component\n-->\n\n<script>\n    import { onMount, onDestroy, createEventDispatcher } from \"svelte\";\n\n    import { appLang } from \"../../constants.js\";\n\n    import ModalRegion from \"./ModalRegion.svelte\";\n\n    /** @typedef {import(\"../types.js\").RegionItemType} RegionItemType */\n    /** @typedef {\"main\"|\"similarity\"|\"expansion\"} ViewIdType */\n\n    //////////////////////////////////////////////////\n\n    /** @type {RegionItemType} */\n    export let mainImgItem;\n    /** @type {RegionItemType} */\n    export let compareImgItem;\n\n    const dispatch = createEventDispatcher();\n\n    /** @type {ViewIdType[]} */\n    const allowedViewIds =\n        compareImgItem\n        ? [ \"main\", \"similarity\", \"expansion\" ]\n        : [ \"main\" ];\n\n    /** @type { {id:ViewIdType, label:string}[] } */\n    const viewTabs = allowedViewIds.map((viewId) => ({\n        id: viewId,\n        label:\n            viewId===\"expansion\" && appLang===\"fr\"\n            ? \"Expansion de requête\"\n            : viewId===\"expansion\" && appLang===\"en\"\n            ? \"Query expansion\"\n            : viewId===\"similarity\" && appLang===\"fr\"\n            ? \"Comparaison\"\n            : viewId===\"similarity\" && appLang===\"en\"\n            ? \"Comparison\"\n            : viewId===\"main\" && appLang===\"fr\"\n            ? \"Vue principale\"\n            : \"Main view\"\n    }));\n\n    /**\n     * @type {{ [ViewIdType]: SvelteComponent }} viewId mapped to the relevant component instance.\n     * by default, only ModalRegion is defined. other components qre imported aynchronously, after which viewComponents is updated\n     */\n    const viewComponents = { main: ModalRegion };\n    if ( compareImgItem ) {\n        Promise.all([\n            import(\"./ModalSimilarity.svelte\").then(res => res.default),\n            import(\"./ModalQueryExpansion.svelte\").then(res => res.default),\n        ]).then(([modalSimilarityComponent, modalQueryExpansionComponent]) => {\n            allowedViewIds.map((viewId) =>\n                viewComponents[viewId] =\n                    viewId===\"expansion\"\n                    ? modalQueryExpansionComponent\n                    : viewId===\"similarity\"\n                    ? modalSimilarityComponent\n                    : ModalRegion\n            );\n        })\n    }\n\n    const viewProps = {};\n    allowedViewIds.map((viewId) =>\n        viewProps[viewId] =\n            viewId===\"expansion\"\n            ? {mainImgItem: mainImgItem}\n            : viewId===\"similarity\"\n            ? {compareImgItem: compareImgItem, mainImgItem: mainImgItem}\n            : {mainImgItem: mainImgItem}\n    )\n\n    /** @type {ViewIdType} */\n    $: currentViewId = allowedViewIds[0];\n\n    //////////////////////////////////////////////////\n\n    const toggleView = (viewId) => currentViewId = viewId;\n\n    const onKeyDown = () => { if (key===\"Escape\") dispatch(\"closeModal\") };\n\n    const onClose = () => dispatch(\"closeModal\");\n\n    //////////////////////////////////////////////////\n\n    onMount(() => {\n        document.addEventListener(\"keyup\", onKeyDown);\n    })\n    onDestroy(() => {\n        document.removeEventListener(\"keydown\", onKeyDown);\n    })\n</script>\n\n\n<div id=\"region-modal-wrapper\"\n     class=\"modal is-active\">\n    <div class=\"modal-background\"></div>\n    <div class=\"modal-content\">\n        <div class=\"modal-inner\">\n\n            <div class=\"tabs is-centered\">\n                <ul>\n                    {#each viewTabs as { id, label }}\n                        <li class={id===currentViewId ? \"is-active\": \"\"}>\n                            <!-- svelte-ignore a11y-invalid-attribute -->\n                            <a on:click|preventDefault={() => toggleView(id)}\n                               href=\"\"\n                            >{ label }</a>\n                        </li>\n                    {/each}\n                </ul>\n            </div>\n\n            <div class=\"ml-4 mr-4 modal-main-wrapper\"\n                 class:pb-4={ currentViewId===\"main\" }\n            >\n                <svelte:component this={viewComponents[currentViewId] || null}\n                                  {...viewProps[currentViewId] || {}}\n                ></svelte:component>\n            </div>\n\n        </div>\n    </div>\n    <button class=\"modal-close is-large\"\n            aria-label=\"close\"\n            on:click={onClose}\n    ></button>\n</div>\n\n<style>\n    .modal-content {\n        width: 80vw;\n        height: 80vh;\n    }\n    .modal-inner {\n        height: 100%;\n        display: grid;\n        grid-template-columns: 100%;\n        grid-template-rows: 10% 90%;\n        background-color: var(--bulma-body-background-color);\n        border: var(--default-border);\n        border-radius: 1rem;\n        overflow: scroll;\n    }\n    .modal-main-wrapper {\n        height: 100%;\n    }\n</style>\n","<!-- about the Modal submodule im general:\n\n    structure\n    ---------\n    Region: displays a region, or part of a document\n    |__ModalController: a button that opens/closes the modal\n       |__ModalBase:  wrapper component: the modal itself + tabs to switch between inner components + the inner component being displayed\n          |__<other child components. only 1 of those is displayed at a time, and the tabs allow to switch between them.>\n\n    props\n    -----\n    `mainImgItem` is needed. `compareImgItem` is optional.\n    if used, will indicate that we are in a similarity context.\n    - for all regions, `mainImgItem` holds info for the image\n        displayed in the parent `Region`.\n    - for similarities, `compareImgItem` contains data on the\n        query image, and `mainImgItem` is the similarity in the\n        `Region` was clicked.\n\n    important to know\n    -----------------\n    - the complexitiy is that `Region`is a component that is used in\n        different parts of the app, and a Region can have different\n        meaning depending on where it's used. i.e, `Region` is used\n        in `PageRegions` (to display regions of a document), and\n        `SimilarRegions` (to display a similarity to a query image),\n        in turn, ModalBase contains displays components depending on\n        this context: for similarities, `ModalSimilarity` and\n        `ModalQueryExpansion` will be used, for example.\n    - the props passed to `ModalController` are used to determine the\n        context that we're in. if `compareImgItem` is used, we're in a\n        similarity regions and will display the similarity modal components.\n    - a second small complexity is that `ModalQueryExpansion` contains\n        `SimilarityRow` which has for descendent `Region`\n        => Region recursively contains itself\n        => we use the `isInModal` context to block some of the `Region`'s\n            functionnality when inside the modal.\n\n    in theory, ModalBase could be extensed to be used in other contexts, i.e for\n    vectorizations.\n-->\n\n<script>\n    import { setContext } from \"svelte\";\n\n    import { appLang } from \"../../constants.js\";\n\n    import TooltipGeneric from \"../../ui/TooltipGeneric.svelte\";\n    import ModalBase from \"./ModalBase.svelte\";\n\n    /** @typedef {import(\"../types.js\").RegionItemType} RegionItemType */\n\n    //////////////////////////////////////////\n\n    /** @type {RegionItemType} */\n    export let mainImgItem;\n    /** @type {RegionItemType} */\n    export let compareImgItem = undefined;\n\n    //`Region.svelte` is parent of `ModalController.svelte` and `ModalController` has for descendant `Region,svelte` => weird recursion in which a region contains a modal which could contain a region which could contain a modal.\n    // => `isInModal` context avoids this recursion by only implementing `ModalController` in `Region` if `getContext(isInModal)===false`\n    setContext(\"isInModal\", true);\n\n    const htmlId = `modal-opener-${window.crypto.randomUUID()}`;\n\n    const title = appLang===\"fr\" ? \"Vue détaillée\" : \"Detailed view\";\n\n    /** @type {boolean} when true, display the modal */\n    $: displayModal = false;\n    /** @type {SvelteComponent?} */\n    $: modal = mountModal(displayModal, modal);\n\n    //////////////////////////////////////////\n\n    /** mounting of the `ModalBase` is done in an imperative way and not in the template: this allows us to insert the modal at the end of the html `body` to ensure the modal is not shadowed by other elts */\n    const mountModal = (_displayModal, _modal) => {;\n        if (_displayModal) {\n            _modal = new ModalBase({\n                target: document.querySelector(\"body\"),\n                props: {\n                    mainImgItem: mainImgItem,\n                    compareImgItem: compareImgItem,\n                }\n            })\n            _modal.$on(\"closeModal\", onCloseModal);\n        } else if (!_displayModal && modal!=null ) {\n            _modal.$destroy();\n        }\n        return _modal;\n    }\n\n    const onClick = () => displayModal = !displayModal;\n    const onCloseModal = () => displayModal = false;\n\n</script>\n\n\n<div id={htmlId}>\n    <TooltipGeneric targetHtmlId={htmlId}\n                    tooltipText={title}\n    ></TooltipGeneric>\n    <button class=\"button tag\"\n            on:click={onClick}\n            title={title}\n    >\n        <svg width=\"54\" height=\"30\" viewBox=\"0 0 54 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M53.6443 14.25C47.7042 5.33 37.7293 0 26.9801 0C16.2206 0 6.24576 5.33 0.305653 14.25L0 14.71L0.305653 15.17C6.24576 24.09 16.2206 29.42 26.9801 29.42C37.7293 29.42 47.7042 24.09 53.6443 15.16L53.95 14.71L53.6443 14.25ZM3.25025 14.71C7.63146 8.69001 14.0606 4.65 21.2641 3.22C20.0619 3.83 18.9411 4.62 17.963 5.59C15.5176 8.02 14.1625 11.25 14.1625 14.67C14.1625 18.11 15.5176 21.34 17.963 23.76C19.0124 24.79 20.1943 25.61 21.4781 26.23C14.1829 24.85 7.6824 20.78 3.25025 14.71ZM27.1125 22.64C22.7008 22.64 19.1041 19.08 19.1041 14.7C19.1041 12.59 19.9396 10.6 21.4475 9.10001C22.9555 7.60001 24.9729 6.77 27.1125 6.77C29.2522 6.77 31.2594 7.60001 32.7775 9.10001C34.2855 10.6 35.121 12.59 35.121 14.7C35.121 16.82 34.2855 18.82 32.7775 20.32C31.2594 21.81 29.242 22.64 27.1125 22.64ZM32.9915 26.14C34.204 25.53 35.3146 24.74 36.3029 23.77C38.7482 21.34 40.0932 18.11 40.0932 14.68C40.0932 9.75 37.281 5.47001 33.1647 3.32001C40.1747 4.81001 46.4102 8.83001 50.6896 14.71C46.3797 20.64 40.0728 24.67 32.9915 26.14Z\" fill=\"black\"/>\n            <path d=\"M26.9804 25.98C33.3222 25.98 38.4633 20.9343 38.4633 14.71C38.4633 8.48576 33.3222 3.44 26.9804 3.44C20.6386 3.44 15.4976 8.48576 15.4976 14.71C15.4976 20.9343 20.6386 25.98 26.9804 25.98Z\" fill=\"black\"/>\n            <path d=\"M17.9529 23.85L36.2928 5.85001\" stroke=\"black\" stroke-width=\"3\" stroke-miterlimit=\"10\"/>\n        </svg>\n    </button>\n</div>\n\n\n<style>\n    .button {\n        padding-left: .5em;\n        padding-right: .5em;\n    }\n    svg, path {\n        fill: var(--bulma-link);\n        stroke: var(--bulma-link);\n    }\n</style>\n"],"names":["ctx","insert","target","div","anchor","mainImgItem","$$props","attr","li","li_class_value","append","a","dirty","length","i","switch_instance_spread_levels","toggle_class","div2","div5","div0","div4","div3","div1","ul","button","get_spread_update","get_spread_object","compareImgItem","dispatch","createEventDispatcher","allowedViewIds","viewTabs","map","viewId","id","label","appLang","viewComponents","main","ModalRegion","Promise","all","import","then","res","default","modalSimilarityComponent","modalQueryExpansionComponent","$$invalidate","viewProps","toggleView","currentViewId","onKeyDown","key","onMount","document","addEventListener","onDestroy","removeEventListener","svg","path0","path1","path2","setContext","htmlId","window","crypto","randomUUID","title","onCloseModal","displayModal","_displayModal","_modal","modal","ModalBase","querySelector","props","$on","$destroy"],"mappings":"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"}
